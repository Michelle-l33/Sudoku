The improvement we chose to implement was that the solver would be able to take on a puzzle of any size. It works on multiple sized puzzles consistently, as well as ones with varying difficulties.  Obviously the larger the grid size, the longer it can take to run and produce all possible solutions. I think the way we implemented this option definitely takes up more space as we have to store the grid size ,sub grid size, and all possible solutions that each method may find. If the puzzles that are entered are of a larger grid size, there may be multiple solutions, all of which are of the same size as the original grid, meaning it takes up quite a lot of space.  With the storage of extra variables and the program having to accommodate larger sized puzzles, this implementation is more suited for finding a solution fast, rather than finding multiple solutions. If the puzzles are large, then it would take a lot of processing time in order to go through every possible solution for each cell with both BFS and DFS. With that being said, the DFS times were actually a lot slower than the BFS method in our tests, except for when the grid is smaller like a 4x4.