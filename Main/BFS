import java.util.*;

public class Solver {
    private int[][] grid;
    private final int gridSize;
    private final int subGridSize;
    protected Graph graph;

    public Solver(int gridSize, int subGridSize, int[][] OriginalGrid) {
        this.gridSize = gridSize;
        this.subGridSize = subGridSize;
        this.grid = OriginalGrid; // creates the grid for the puzzle
        this.graph = new Graph(); // creates graph for the specified puzzle
    }

    // BFS method to solve the Sudoku puzzle
    public List<int[][]> solveByBFS() {
        List<int[][]> solutions = new ArrayList<>();
        Queue<int[][]> queue = new LinkedList<>();

        // Initialize the queue with the starting grid
        queue.add(copy(this.grid));

        while (!queue.isEmpty()) {
            int[][] currentGrid = queue.poll();

            // If the grid is solved, add it to the solutions
            if (isSolved(currentGrid)) {
                solutions.add(copy(currentGrid));
                continue; // skip further exploration since we found a solution
            }

            // Get the next empty cell to fill
            int[] emptyCell = getEmptyCell(currentGrid);
            if (emptyCell == null) {
                continue; // No empty cells, skip this grid
            }

            int row = emptyCell[0];
            int col = emptyCell[1];

            // Try placing each number (1 to gridSize) in the empty cell
            for (int num = 1; num <= this.gridSize; num++) {
                if (canPlace(currentGrid, row, col, num)) {
                    int[][] newGrid = copy(currentGrid);
                    newGrid[row][col] = num;
                    queue.add(newGrid); // Add the new grid state to the queue
                }
            }
        }
        return solutions; // Return the list of solutions found
    }

    // Check if the grid is solved
    private boolean isSolved(int[][] grid) {
        for (int row = 0; row < this.gridSize; row++) {
            for (int col = 0; col < this.gridSize; col++) {
                if (grid[row][col] == 0) {
                    return false; // If there's any empty cell, it's not solved
                }
            }
        }
        return true; // All cells are filled
    }

    // Get the coordinates of the next empty cell (row, col)
    private int[] getEmptyCell(int[][] grid) {
        for (int row = 0; row < this.gridSize; row++) {
            for (int col = 0; col < this.gridSize; col++) {
                if (grid[row][col] == 0) {
                    return new int[]{row, col};
                }
            }
        }
        return null; // No empty cells found
    }

    // Check if it's possible to place the number in the given cell
    public boolean canPlace(int[][] grid, int row, int col, int num) {
        // Check the row
        for (int i = 0; i < this.gridSize; i++) {
            if (grid[row][i] == num) {
                return false; // Number already exists in the row
            }
        }

        // Check the column
        for (int i = 0; i < this.gridSize; i++) {
            if (grid[i][col] == num) {
                return false; // Number already exists in the column
            }
        }

        // Check the subgrid
        int subGridRow = (row / this.subGridSize) * this.subGridSize;
        int subGridCol = (col / this.subGridSize) * this.subGridSize;
        for (int i = subGridRow; i < subGridRow + this.subGridSize; i++) {
            for (int j = subGridCol; j < subGridCol + this.subGridSize; j++) {
                if (grid[i][j] == num) {
                    return false; // Number already exists in the subgrid
                }
            }
        }

        return true; // If no conflicts, the number can be placed
    }

    // Copy the grid to avoid modifying the original grid
    private int[][] copy(int[][] grid) {
        int[][] copyGrid = new int[this.gridSize][this.gridSize];
        for (int i = 0; i < this.gridSize; i++) {
            for (int j = 0; j < this.gridSize; j++) {
                copyGrid[i][j] = grid[i][j];
            }
        }
        return copyGrid;
    }

    // Print the solved grid
    public void printGrid(int[][] grid) {
        for (int i = 0; i < this.gridSize; i++) {
            for (int j = 0; j < this.gridSize; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }
}
